{"version":3,"file":"static/js/887.5f2704d1.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogs.module.scss?0fcc","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogitem/DialogItem.module.scss?4c9b","utils/BeautyData/BeautyData.ts","components/SideWidgets/Dialogs/Dialogitem/Dialogsitem.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/Message.module.scss?c42f","components/SideWidgets/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/SendMessage.module.scss?9a2b","components/SideWidgets/Dialogs/Message/SendMessageForm.tsx","components/SideWidgets/Dialogs/Dialogs.tsx","components/SideWidgets/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gQwrs\",\"dialogWindow\":\"Dialogs_dialogWindow__mnf2+\",\"messagesWindow\":\"Dialogs_messagesWindow__Xvse5\",\"messages\":\"Dialogs_messages__r0PXH\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogBlock\":\"DialogItem_dialogBlock__NRaDx\",\"photoBlock\":\"DialogItem_photoBlock__cWJpe\",\"userPhoto\":\"DialogItem_userPhoto__TpOKh\",\"online\":\"DialogItem_online__kciUa\",\"aboutBlock\":\"DialogItem_aboutBlock__+I2WQ\",\"about\":\"DialogItem_about__KwyJj\",\"name\":\"DialogItem_name__KKYjb\",\"newMessages\":\"DialogItem_newMessages__sxz9l\"};","export const BeautyDate = (date?: Date) => {\n  return new Date(date ? date : '').toLocaleString('en', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n};\n\nexport function dateAgo(lastDialogActivityDate: Date): string {\n  const now = new Date();\n  const activityDate = new Date(lastDialogActivityDate);\n\n  // Устанавливаем часовой пояс пользователя\n  activityDate.setTime(activityDate.getTime() - activityDate.getTimezoneOffset() * 60 * 1000);\n\n  // Разница в миллисекундах\n  const timeDifference = now.getTime() - activityDate.getTime();\n  const oneMinute = 60 * 1000;\n  const oneHour = 60 * oneMinute;\n  const oneDay = 24 * oneHour;\n  const oneMonth = 30 * oneDay;\n  const oneYear = 365 * oneDay;\n\n  if (timeDifference < oneHour) {\n    // Менее часа назад\n    const minutesAgo = Math.floor(timeDifference / oneMinute);\n    return `${minutesAgo} min. ago`;\n  } else if (timeDifference < oneDay) {\n    // От часа до 24 часов назад\n    const hoursAgo = Math.floor(timeDifference / oneHour);\n    return `${hoursAgo} hours ago`;\n  } else if (timeDifference < oneMonth) {\n    // От 24 часов до 30 дней назад\n    const daysAgo = Math.floor(timeDifference / oneDay);\n    return `${daysAgo} days ago`;\n  } else if (timeDifference < oneYear) {\n    // От 30 дней до 365 дней назад\n    const monthsAgo = Math.floor(timeDifference / oneMonth);\n    return `${monthsAgo} months ago`;\n  } else {\n    // Больше 365 дней назад\n    const day = activityDate.getDate();\n    const month = activityDate.getMonth() + 1; // Месяцы в JavaScript начинаются с 0\n    const year = activityDate.getFullYear();\n\n    // Форматируем дату как \"dd.mm.yyyy\"\n    return `${day < 10 ? '0' : ''}${day}.${month < 10 ? '0' : ''}${month}.${year}`;\n  }\n}\n\n// export const dateAgo = (date: any) => {\n//   const time: number = Math.ceil(new Date().getTime() - new Date(date).getTime());\n//   const last = Math.ceil(time / 1000);\n//   if (last < 60) {\n//     return last + ' min. ago';\n//   } else if (last > 60 && last < 1440) {\n//     return Math.ceil(last / 60) + ' h ago';\n//   } else if (last > 1440 && last < 43200) {\n//     return Math.ceil(last / 1440) + ' days ago';\n//   } else if (last > 43200 && last < 518400) {\n//     return Math.ceil(last / 43200) + ' months ago';\n//   } else if (last > 518400) {\n//     return new Date(date).toLocaleString('en', {\n//       day: 'numeric',\n//       month: 'numeric',\n//       year: 'numeric',\n//       hour: '2-digit',\n//       minute: '2-digit',\n//       hour12: false\n//     });\n//   }\n// };\nexport const isOnline = (date: any) => {\n  const time: number = Math.ceil(new Date().getTime() - new Date(date).getTime());\n  return Math.ceil(time / 1000000) < 15;\n};\n","import React from 'react';\nimport css from './DialogItem.module.scss';\nimport { NavLink } from 'react-router-dom';\nimport { DialogsType, putDialogTC } from '../../../../redux/dialogs-reducer';\nimport { useAppDispatch } from '../../../../hooks/hooks';\nimport avaNeo from '../../../../assets/images/avaNeo.png';\nimport { dateAgo, isOnline } from '../../../../utils/BeautyData/BeautyData';\n\ntype DialogsItemType = {\n  dialogItem: DialogsType;\n};\n\nexport const DialogItem: React.FC<DialogsItemType> = React.memo(({ dialogItem }) => {\n  const { id, photos, userName, hasNewMessages, newMessagesCount, lastUserActivityDate, lastDialogActivityDate } =\n    dialogItem;\n  const dispatch = useAppDispatch();\n  let path = '/profile/' + id;\n  const startChat = () => {\n    dispatch(putDialogTC(id));\n  };\n\n  const lastActivity = dateAgo(lastUserActivityDate);\n  const lastDialog = dateAgo(lastDialogActivityDate);\n  const time: number = Math.ceil(new Date(lastDialogActivityDate).getTime());\n\n  return (\n    <div className={css.dialogBlock}>\n      <div onClick={startChat} className={css.photoBlock}>\n        <img className={css.userPhoto} src={photos.small != null ? photos.small : avaNeo} alt=\"avatar\" />\n        {isOnline(lastUserActivityDate) && <div className={css.online}></div>}\n      </div>\n\n      <div className={css.aboutBlock}>\n        <div className={css.about}>\n          <NavLink to={path} title={'see profile'}>\n            <h5 className={css.name}>{userName}</h5>\n          </NavLink>\n\n          <h6>\n            Last: <span>{lastActivity}</span>\n          </h6>\n          <h6>\n            Dialog: <span>{lastDialog}</span>\n          </h6>\n        </div>\n\n        <div className={css.newMessages}>\n          {' '}\n          {hasNewMessages ? <span style={{ color: 'limegreen' }}>New {newMessagesCount} messages</span> : ''}\n        </div>\n      </div>\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Message_messageBlock__tr-dI\",\"nameData\":\"Message_nameData__+Dz7a\",\"name\":\"Message_name__Rq0ss\",\"dateAdd\":\"Message_dateAdd__aGmR+\",\"message\":\"Message_message__YdCvZ\",\"left\":\"Message_left__Cejf-\",\"right\":\"Message_right__PleNH\"};","import React from 'react';\nimport { MessageItemType } from '../../../../redux/dialogs-reducer';\nimport css from './Message.module.scss';\nimport { dateAgo } from '../../../../utils/BeautyData/BeautyData';\n\ntype MessageType = {\n  message: MessageItemType;\n  userId: number;\n};\n\nexport const Message: React.FC<MessageType> = ({ message, userId }) => {\n  const style = message.senderId === userId ? css.right : css.left;\n\n  return (\n    <div className={`${css.messageBlock} ${style}`} key={message.id}>\n      <div className={css.nameData}>\n        <h5 className={css.name}>{message.senderName}</h5>\n        <span className={css.dateAdd}>{dateAgo(message.addedAt)}</span>\n      </div>\n      <div className={css.body}>\n        <p className={css.message}>{message.body}</p>\n      </div>\n\n      {/*<div className={css.viewed}>viewed {message.viewed}</div>*/}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sendMessage\":\"SendMessage_sendMessage__rjtdj\",\"buttonBlock\":\"SendMessage_buttonBlock__8ndoV\"};","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\nimport { TextAreaFormik } from '../../../00-Common/InputFormik/InputFormik';\nimport { Button } from '../../../00-Common/Button/Button';\nimport { sendMessageTC } from '../../../../redux/dialogs-reducer';\nimport css from './SendMessage.module.scss';\n\ntype SendMessageType = {\n  userId: number;\n};\n\nconst SendMessageForm: React.FC<SendMessageType> = ({ userId }) => {\n  const isFetching = useAppSelector(state => state.dialogsPage.isFetching);\n  const [message, setMessage] = useState('');\n  const dispatch = useAppDispatch();\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    } else {\n      dispatch(sendMessageTC(userId, message));\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className={css.sendMessage}>\n      <div>\n        <TextAreaFormik onChange={e => setMessage(e.currentTarget.value)} value={message} />\n        {/*<textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>*/}\n      </div>\n      <div className={css.buttonBlock}>\n        <Button disabled={isFetching} onClick={sendMessageHandler}>\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SendMessageForm;\n","import React, { useEffect, useRef, useState } from 'react';\nimport css from './Dialogs.module.scss';\nimport { DialogItem } from './Dialogitem/Dialogsitem';\nimport { Message } from './Message/Message';\nimport { DialogsType, getDialogsTC, MessageItemType } from '../../../redux/dialogs-reducer';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\n\nimport SendMessageForm from './Message/SendMessageForm';\n\ntype DialogsPageType = {\n  newTextMessageOnChange: (newMessageText: string) => void;\n  addMessageOnClick: () => void;\n  isAuth: boolean;\n  dialogs: Array<DialogsType>;\n  messages: Array<MessageItemType>;\n  getDialogs: () => void;\n};\n\nexport const Dialogs = React.memo((props: DialogsPageType) => {\n  const dispatch = useAppDispatch();\n  const dialogs = useAppSelector(state => state.dialogsPage.dialogs);\n  const messages = useAppSelector(state => state.dialogsPage.messages);\n  const userId = useAppSelector(state => state.dialogsPage.userId);\n  const totalCount = useAppSelector(state => state.dialogsPage.totalCount);\n\n  const [autoScroll, setAutoScroll] = useState(true);\n\n  const [autoPage, setAutoPage] = useState(1);\n\n  const topAnchorRef = useRef<HTMLDivElement>(null);\n  const bottomAnchorRef = useRef<HTMLDivElement>(null);\n\n  const scrollBottomHandler = (e: React.UIEvent<HTMLDivElement>) => {\n    let element = e.currentTarget;\n\n    if (element.scrollTop <= 0 && totalCount > autoPage * 10) {\n      setAutoPage(autoPage + 1);\n      // dispatch(getMessagesListTC(userId, 10, autoPage))\n    }\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n      !autoScroll && setAutoScroll(true);\n      // setAutoPage(autoPage-1)\n      // dispatch(getMessagesListTC(userId, 10, autoPage))\n    } else {\n      autoScroll && setAutoScroll(false);\n    }\n  };\n  useEffect(() => {\n    autoScroll && bottomAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, autoScroll]);\n\n  useEffect(() => {\n    dispatch(getDialogsTC());\n  }, [dispatch, userId]);\n  return (\n    <div className={css.dialogs}>\n      <div style={{ height: '650px', overflowY: 'auto' }} className={css.dialogWindow}>\n        {dialogs && dialogs.map(el => <DialogItem key={el.id} dialogItem={el} />)}\n      </div>\n      <div className={css.messagesWindow}>\n        <div style={{ height: '480px', overflowY: 'auto' }} className={css.messages} onScroll={scrollBottomHandler}>\n          <div ref={topAnchorRef}></div>\n          {messages && messages.map(el => <Message key={el.id} message={el} userId={userId} />)}\n          <div ref={bottomAnchorRef}></div>\n        </div>\n        <SendMessageForm userId={userId} />\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { newTextMessageOnChange, DialogsType, getDialogsTC, sendMessageTC } from '../../../redux/dialogs-reducer';\nimport { RootState } from '../../../redux/redux-store';\nimport { Dialogs } from './Dialogs';\nimport { connect } from 'react-redux';\nimport { WithAuthRedirect } from '../../../hoc/WithAuthRedirect';\nimport { compose } from 'redux';\n\ntype MapStateToPropsType = {\n  dialogsPage: Array<DialogsType>;\n  isAuth: boolean;\n};\ntype MapDispatchToPropsType = {\n  newTextMessageOnChange: (text: string) => void;\n  sendMessageTC: (userId: number, messageBody: string) => void;\n  getDialogsTC: () => void;\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n  return {\n    dialogsPage: state.dialogsPage.dialogs,\n    isAuth: state.auth.isAuth\n  } as MapStateToPropsType;\n};\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>(mapStateToProps, {\n    newTextMessageOnChange,\n    sendMessageTC,\n    getDialogsTC\n  }),\n  WithAuthRedirect\n)(Dialogs);\n"],"names":["dateAgo","lastDialogActivityDate","now","Date","activityDate","setTime","getTime","getTimezoneOffset","timeDifference","oneHour","oneDay","oneMonth","minutesAgo","Math","floor","concat","hoursAgo","daysAgo","monthsAgo","day","getDate","month","getMonth","year","getFullYear","isOnline","date","time","ceil","DialogItem","React","_ref","dialogItem","id","photos","userName","hasNewMessages","newMessagesCount","lastUserActivityDate","dispatch","useAppDispatch","path","lastActivity","lastDialog","_jsxs","className","css","children","onClick","putDialogTC","_jsx","src","small","avaNeo","alt","NavLink","to","title","style","color","Message","message","userId","senderId","senderName","addedAt","body","isFetching","useAppSelector","state","dialogsPage","_useState","useState","_useState2","_slicedToArray","setMessage","TextAreaFormik","onChange","e","currentTarget","value","Button","disabled","sendMessageTC","Dialogs","props","dialogs","messages","totalCount","autoScroll","setAutoScroll","_useState3","_useState4","autoPage","setAutoPage","topAnchorRef","useRef","bottomAnchorRef","useEffect","_bottomAnchorRef$curr","current","scrollIntoView","behavior","getDialogsTC","height","overflowY","map","el","onScroll","element","scrollTop","scrollHeight","clientHeight","ref","SendMessageForm","DialogsContainer","compose","connect","isAuth","auth","newTextMessageOnChange","WithAuthRedirect"],"sourceRoot":""}