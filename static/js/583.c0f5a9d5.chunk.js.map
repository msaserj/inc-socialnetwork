{"version":3,"file":"static/js/583.c0f5a9d5.chunk.js","mappings":"kLACA,G,QAAA,CAAgB,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,8B,mBCQnNA,EAAa,SAACC,GAEvB,IACIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,gBAAKC,UAAWC,EAAAA,OAAiB,IAAMA,EAAAA,OAAvC,UACH,SAAC,KAAD,CAASD,UAHK,SAAC,GAAD,SAAEE,SAA8CD,EAAAA,WAAqBA,EAAAA,cAGpDE,GAAIL,EAAnC,SAA0CD,EAAMO,UCN3CC,EAAU,SAACR,GACpB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAAkCJ,EAAMS,W,oBCgBnCC,GAAmBC,E,QAAAA,KAC5BC,EAAAA,EAAAA,KAVoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMG,KAAKD,UAQL,CAACE,uBAAAA,EAAAA,GAAwBC,kBAAAA,EAAAA,KAC3CC,EAAAA,EAH4BR,ECZT,SAACX,GAEpB,IAAIoB,EAAiBpB,EAAMc,YAAYO,QAAQC,KAAI,SAAAC,GAAE,OAAG,SAACxB,EAAD,CAAwBQ,KAAMgB,EAAGhB,KAAML,GAAIqB,EAAGrB,IAA7BqB,EAAGrB,OACxEsB,EAAkBxB,EAAMc,YAAYW,SAASH,KAAI,SAAAC,GAAE,OAAG,SAACf,EAAD,CAAqBC,QAASc,EAAGd,SAAnBc,EAAGrB,OACvEwB,EAAkB1B,EAAMc,YAAYY,gBASxC,OACI,iBAAKvB,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKgB,KAGL,iBAAKjB,UAAWC,EAAAA,SAAhB,WACI,yBAAMoB,KACN,4BACI,0BACI,qBAAUG,MAAOD,EAAiBE,SAdvB,SAACC,GAC5B7B,EAAMiB,uBAAuBY,EAAEC,cAAcH,QAauCI,YAAY,0BAEpF,0BACI,mBAAQC,QApBE,WAC1BhC,EAAMkB,qBAmBU","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialogitem/Dialogsitem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"inactiveLink\":\"Dialogs_inactiveLink__HDQz0\",\"activeLink\":\"Dialogs_activeLink__mpzNi\"};","import React from \"react\";\nimport classes from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\nexport const DialogItem = (props: DialogItemType) => {\n\n    const setActive = ({isActive}: {isActive: boolean}) => isActive ? classes.activeLink : classes.inactiveLink;\n    let path = \"/dialogs/\" + props.id;\n    return <div className={classes.dialog + ' ' + classes.active}>\n        <NavLink className={setActive} to={path}>{props.name}</NavLink>\n    </div>\n\n}","import React from \"react\";\nimport classes from './../Dialogs.module.css';\n\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n    )\n}\n","import React from \"react\";\nimport {DialogPageType, addMessageOnClick, newTextMessageOnChange} from \"../../redux/dialogs-reducer\";\nimport {RootState} from \"../../redux/redux-store\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogPageType\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    newTextMessageOnChange: (text: string) => void\n    addMessageOnClick: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n}\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>\n    (mapStateToProps, {newTextMessageOnChange, addMessageOnClick}),\n    WithAuthRedirect\n)(Dialogs)\n\n","import React, {ChangeEvent} from \"react\";\nimport classes from './Dialogs.module.css'\nimport {DialogItem} from \"./Dialogitem/Dialogsitem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogPageType} from \"../../redux/dialogs-reducer\";\n\n\ntype DialogsPageType = {\n    newTextMessageOnChange: (newMessageText: string)=> void\n    addMessageOnClick: () => void\n    isAuth: boolean\n    dialogsPage: DialogPageType\n }\n\nexport const Dialogs = (props: DialogsPageType) => {\n\n    let dialogsElement = props.dialogsPage.dialogs.map(el=> <DialogItem key={el.id} name={el.name} id={el.id}/>);\n    let messagesElement = props.dialogsPage.messages.map(el=> <Message key={el.id} message={el.message} />);\n    let newMessageState = props.dialogsPage.newMessageState\n\n    const messageOnClickHandler = () => {\n        props.addMessageOnClick()\n    }\n    const messageOnChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.newTextMessageOnChange(e.currentTarget.value)\n    }\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogItems}>\n                {dialogsElement}\n            </div>\n\n            <div className={classes.messages}>\n                <div>{messagesElement}</div>\n                <div>\n                    <div>\n                        <textarea value={newMessageState} onChange={messageOnChangeHandler} placeholder=\"Enter your message\"/>\n                    </div>\n                    <div>\n                        <button onClick={messageOnClickHandler}>Send</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"names":["DialogItem","props","path","id","className","classes","isActive","to","name","Message","message","DialogsContainer","compose","connect","state","dialogsPage","isAuth","auth","newTextMessageOnChange","addMessageOnClick","WithAuthRedirect","dialogsElement","dialogs","map","el","messagesElement","messages","newMessageState","value","onChange","e","currentTarget","placeholder","onClick"],"sourceRoot":""}