{"version":3,"file":"static/js/12.3ddb2fac.chunk.js","mappings":"2LACA,EAAyB,0B,SCgBZA,EAAqC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACzDC,QAAQC,IAAI,YACZ,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOL,MAEA,0CAA0CO,KAAKF,EAAOL,SAC9DM,EAAON,MAAQ,yBAFfM,EAAON,MAAQ,WAIdK,EAAOJ,SAEDI,EAAOJ,SAASO,OAAOC,OAAS,IACvCH,EAAOL,SAAW,iBAFlBK,EAAOL,SAAW,WAIfK,GAEXI,SAAU,SAACL,EAAOM,GACdlB,EAAQY,EAAOL,MAAOK,EAAOJ,SAAUI,EAAOH,WAAYG,EAAOF,QAASQ,EAAcC,UAAWD,EAAcE,eACjHF,EAAcE,eAAc,MAIpC,OACI,kBAAMH,SAAUb,EAAOiB,aAAvB,WACI,iBAAKC,UAAWC,EAAhB,eAA6B,kBAAOC,QAAQ,QAAf,oBACzB,0BAAOC,GAAG,QAAQC,KAAK,SACftB,EAAOuB,cAAc,WAE5BvB,EAAOS,OAAON,OAAQ,yBAAMH,EAAOS,OAAON,QAAe,SAC9D,iBAAMe,UAAWC,EAAjB,eAA8B,kBAAOC,QAAQ,WAAf,uBAC1B,0BAAOC,GAAG,WAAWC,KAAK,YAClBtB,EAAOuB,cAAc,cAE5BvB,EAAOS,OAAOL,UAAW,yBAAMJ,EAAOS,OAAOL,WAAkB,SACpE,iBAAMc,UAAWC,EAAjB,eAA8B,kBAAOC,QAAQ,aAAf,0BAC1B,kCAAOC,GAAG,WAAWC,KAAK,YAClBtB,EAAOuB,cAAc,eAD7B,IAEIC,QAASxB,EAAOQ,OAAOH,cAE1BL,EAAOS,OAAOJ,YAAa,yBAAML,EAAOS,OAAOJ,aAAoB,SACxE,iBAAMa,UAAWC,EAAjB,UACKnB,EAAOyB,OAEP5B,IACG,iBAAKqB,UAAWC,EAAhB,WACA,gBAAKO,IAAK7B,EAAY8B,IAAI,gBAC1B,kBAAOP,QAAQ,UAAf,sBACA,0BAAOC,GAAG,UAAUC,KAAK,QACzBtB,EAAOuB,cAAc,aAExBvB,EAAOS,OAAOH,SAAU,yBAAMN,EAAOS,OAAOH,UAAiB,SAE9D,mBAAQgB,KAAK,SAAb,2B,8BClDhB,GAAeM,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBjC,WAAYgC,EAAME,KAAKzB,WAIS,CAACV,QAAAA,EAAAA,IAAzC,EAnB0C,SAAC,GAAmC,IAAlCkC,EAAiC,EAAjCA,OAAQlC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACzD,OAAGiC,GACQ,SAAC,KAAD,CAAUE,GAAI,cAGrB,4BACG,mCACC,SAACrC,EAAD,CAAWC,QAASA,EAASC,WAAYA","sources":["webpack://samurai-way/./src/components/Login/LoginForm.module.css?574c","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fields\":\"LoginForm_fields__Ci0OC\"};","\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport css from './LoginForm.module.css'\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\ntype LoginFormType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n    captchaUrl: string | null\n}\n\nexport const LoginForm: React.FC<LoginFormType> = ({loginTC, captchaUrl}) => {\n    console.log(\"RERENDER\")\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: \"\"\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'required';\n            } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'required'\n            } else if (values.password.trim().length < 5) {\n                errors.password = \"min 5 symbols\"\n            }\n            return errors;\n        },\n        onSubmit: (values,onSubmitProps) => {\n            loginTC(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus, onSubmitProps.setSubmitting)\n            onSubmitProps.setSubmitting(true);\n            // alert(JSON.stringify(values));\n        },\n    });\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div className={css.fields}> <label htmlFor=\"email\">Email</label>\n                <input id=\"email\" type=\"email\"\n                    {...formik.getFieldProps(\"email\")}\n                />\n                {formik.errors.email ? <div>{formik.errors.email}</div> : null}</div>\n            <div  className={css.fields}> <label htmlFor=\"password\">Password</label>\n                <input id=\"password\" type=\"password\"\n                    {...formik.getFieldProps(\"password\")}\n                />\n                {formik.errors.password ? <div>{formik.errors.password}</div> : null}</div>\n            <div  className={css.fields}> <label htmlFor=\"RememberMe\">Remember Me</label>\n                <input id=\"checkbox\" type=\"checkbox\"\n                    {...formik.getFieldProps(\"rememberMe\")}\n                    checked={formik.values.rememberMe}\n                />\n                {formik.errors.rememberMe ? <div>{formik.errors.rememberMe}</div> : null}</div>\n            <div  className={css.fields}>\n                {formik.status}\n\n                {captchaUrl &&\n                    <div className={css.fields}>\n                    <img src={captchaUrl} alt=\"captchaUrl\"/>\n                    <label htmlFor=\"captcha\">Captcha</label>\n                    <input id=\"captcha\" type=\"text\"\n                {...formik.getFieldProps(\"captcha\")}\n                    />\n                {formik.errors.captcha ? <div>{formik.errors.captcha}</div> : null}</div>\n                }\n                <button type=\"submit\">Submit</button>\n            </div>\n        </form>\n    );\n};","import React from 'react';\nimport {LoginForm} from \"./LoginForm\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\nimport {RootState} from \"../../redux/redux-store\";\n\nconst Login: React.FC<ProfilePropsType> = ({isAuth, loginTC, captchaUrl}) => {\n    if(isAuth) {\n        return <Navigate to={\"/profile\"}/>\n    }\n    return (\n        <div>\n           <h1>Login</h1>\n            <LoginForm loginTC={loginTC} captchaUrl={captchaUrl}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captcha\n    } as MapStateToPropsType\n}\n\nexport default connect(mapStateToProps, {loginTC})(Login)\n\n\n// types\ntype MapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: any\n}\n\ntype MapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType"],"names":["LoginForm","loginTC","captchaUrl","console","log","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","handleSubmit","className","css","htmlFor","id","type","getFieldProps","checked","status","src","alt","connect","state","isAuth","auth","to"],"sourceRoot":""}