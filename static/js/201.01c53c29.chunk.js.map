{"version":3,"file":"static/js/201.01c53c29.chunk.js","mappings":"qOACA,EAAuB,sBAAvB,EAA0D,4BCA1D,EAAuB,mB,UCQVA,EAAO,SAACC,GACnB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAaC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,uDAAuDC,IAAI,QACnEP,EAAMQ,SACPH,EAAAA,EAAAA,KAAA,OAAAD,UACEH,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CAAM,QAAMJ,EAAMS,kBAI1B,E,oBCNaC,EAAO,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CAmCjB,OAnCiBC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,SAAAC,MAClB,WAAU,IAADC,EAAA,KACHC,EAAgBC,KAAKvB,MAAMwB,YAAYC,MAAMC,KAAI,SAACC,EAAIC,GAAK,OAC7DvB,EAAAA,EAAAA,KAACN,EAAI,CAAa8B,GAAIF,EAAGE,GAAIrB,QAASmB,EAAGnB,QAASC,WAAYkB,EAAGlB,YAAtDmB,EAAoE,IASjF,OACE3B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACyB,EAAAA,GAAc,CAACC,SATI,SAACC,GAC3BX,EAAKrB,MAAMiC,oBAAoBD,EAAEE,cAAcd,MACjD,EAOuDA,MAAOG,KAAKvB,MAAMwB,YAAYW,aAAa/B,SAAC,gBAI7FH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QAjBW,WACzBhB,EAAKrB,MAAMsC,gBACb,EAe4ClC,SAAC,cACrCC,EAAAA,EAAAA,KAAA,SAAOkC,UAAQ,EAACC,sBAAuB,SAAAR,GAAC,MAA+B,KAA3BA,EAAEE,cAAcO,MAAc,EAACrC,UACzEC,EAAAA,EAAAA,KAAA,UAAQC,IAAI,8CAA8CoC,KAAK,oBAInErC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAaC,UAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAENC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAaC,SAAEkB,SAIvC,KAACZ,CAAA,CAnCiB,CAASiC,EAAAA,eCmBhBC,GAAmBC,E,QAAAA,KAjBR,SAACC,GACvB,MAAO,CACLtB,YAAasB,EAAMtB,YAEvB,IAC2B,SAACuB,GAC1B,MAAO,CACLd,oBAAqB,SAACe,GACpB,IAAIC,GAASC,EAAAA,EAAAA,IAAsBF,GACnCD,EAASE,EACX,EACAX,eAAgB,WACdS,GAASI,EAAAA,EAAAA,MACX,EAEJ,GAEgCN,CAA6CnC,E","sources":["webpack://samurai-way/./src/components/SideWidgets/MyPosts/MyPosts.module.css?ed03","webpack://samurai-way/./src/components/SideWidgets/MyPosts/Post/Post.module.css?5874","components/SideWidgets/MyPosts/Post/Post.tsx","components/SideWidgets/MyPosts/MyPosts.tsx","components/SideWidgets/MyPosts/MyPostsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__aUwyY\",\"postsBlock\":\"MyPosts_postsBlock__KqF+B\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__eW19D\"};","import React from 'react';\nimport classes from './Post.module.css';\n\nexport type MessageType = {\n  id: string;\n  message: string;\n  likesCount: number;\n};\n\nexport const Post = (props: MessageType) => {\n  return (\n    <div className={classes.item}>\n      <img src=\"https://cabinet.miem.hse.ru/public-api/user/7/avatar\" alt=\"ava\" />\n      {props.message}\n      <div>\n        <span>like {props.likesCount}</span>\n      </div>\n    </div>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport classes from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { ProfilePageType } from '../../../redux/profile-reducer';\nimport { TextAreaFormik } from '../../00-Common/InputFormik/InputFormik';\nimport { Button } from '../../00-Common/Button/Button';\n\ntype MyPostType = {\n  newPostTextOnChange: (newPostText: string) => void;\n  addPostOnClick: () => void;\n  profilePage: ProfilePageType;\n};\n\nexport class MyPosts extends React.PureComponent<MyPostType> {\n  render() {\n    let postsElements = this.props.profilePage.posts.map((el, index) => (\n      <Post key={index} id={el.id} message={el.message} likesCount={el.likesCount} />\n    ));\n    const postOnClickHandler = () => {\n      this.props.addPostOnClick();\n    };\n    const postOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      this.props.newPostTextOnChange(e.currentTarget.value);\n    };\n\n    return (\n      <div className={classes.postsBlock}>\n        <h3>It`s demo component only!</h3>\n        <div>\n          <div>\n            <TextAreaFormik onChange={postOnChangeHandler} value={this.props.profilePage.newTextState}>\n              Add post\n            </TextAreaFormik>\n          </div>\n          <div>\n            <Button onClick={postOnClickHandler}>Add post</Button>\n            <audio controls onVolumeChangeCapture={e => e.currentTarget.volume === 0.2}>\n              <source src=\"http://sc.schwarze-welle.de:7500/;&type=mp3\" type=\"audio/mp3\" />\n            </audio>\n          </div>\n\n          <div className={classes.item}>\n            <h3>New Post</h3>\n          </div>\n          <div className={classes.item}>{postsElements}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { addPostOnClickAC, newPostTextOnChangeAC, ProfilePageType } from '../../../redux/profile-reducer';\nimport { RootState } from '../../../redux/redux-store';\nimport { MyPosts } from './MyPosts';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\ntype mapStateToPropsType = {\n  profilePage: ProfilePageType;\n};\ntype mapDispatchToPropsType = {\n  newPostTextOnChange: (text: string) => void;\n  addPostOnClick: () => void;\n};\n\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\n  return {\n    profilePage: state.profilePage\n  };\n};\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n  return {\n    newPostTextOnChange: (text: string) => {\n      let action = newPostTextOnChangeAC(text);\n      dispatch(action);\n    },\n    addPostOnClick: () => {\n      dispatch(addPostOnClickAC());\n    }\n  };\n};\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n"],"names":["Post","props","_jsxs","className","classes","children","_jsx","src","alt","message","likesCount","MyPosts","_React$PureComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this","postsElements","this","profilePage","posts","map","el","index","id","TextAreaFormik","onChange","e","newPostTextOnChange","currentTarget","newTextState","Button","onClick","addPostOnClick","controls","onVolumeChangeCapture","volume","type","React","MyPostsContainer","connect","state","dispatch","text","action","newPostTextOnChangeAC","addPostOnClickAC"],"sourceRoot":""}