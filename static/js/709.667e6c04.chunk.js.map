{"version":3,"file":"static/js/709.667e6c04.chunk.js","mappings":"4LACA,GAAgB,YAAc,+BAA+B,OAAS,0BAA0B,QAAU,4B,2DCoB7FA,EAAqC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACnDC,GAAaC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,IAAIC,YACrDC,QAAQC,IAAI,YACZ,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOL,MAEA,0CAA0CO,KAAKF,EAAOL,SAC9DM,EAAON,MAAQ,yBAFfM,EAAON,MAAQ,WAIdK,EAAOJ,SAEDI,EAAOJ,SAASO,OAAOC,OAAS,IACvCH,EAAOL,SAAW,iBAFlBK,EAAOL,SAAW,WAIfK,GAEXI,SAAU,SAACL,EAAQM,GACfvB,EAAQiB,EAAOL,MAAOK,EAAOJ,SAAUI,EAAOH,WAAYG,EAAOF,QAASQ,EAAcC,UAAWD,EAAcE,eACjHF,EAAcE,eAAc,MAG9BC,GAASvB,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMuB,KAAKC,KAAKC,MACvD,GAAIH,EACA,OAAO,SAAC,KAAD,CAAUI,GAAI,YAAcJ,IAEvCnB,QAAQC,IAAIN,GACZ,IAAM6B,EAAgB,WAClBtB,EAAOuB,YACPvB,EAAOwB,WAAW,KAEtB,OAEI,kBAAMC,UAAWC,EAAAA,UAAeb,SAAUb,EAAO2B,aAAjD,WACI,SAACC,EAAA,GAAD,CAAaC,YAAa,QAASC,cAAe9B,EAAO8B,cAAc,SAC1DrB,OAAQT,EAAOS,OAAON,MAAO4B,KAAM,UAChD,SAACH,EAAA,GAAD,CAAaC,YAAa,WAAYC,cAAe9B,EAAO8B,cAAc,YAC7DrB,OAAQT,EAAOS,OAAOL,SAAU2B,KAAM,cAEnD,SAAC,KAAD,CAAgBC,MAAO,cAAeF,cAAe9B,EAAO8B,cAAc,gBAGzE9B,EAAOiC,SAAU,iBAAMC,MAAO,CAACC,MAAO,OAArB,SAA8BnC,EAAOiC,SACtDzC,IACG,iBAAKiC,UAAWC,EAAAA,OAAhB,WACI,gBAAKU,IAAK5C,EAAY6C,IAAI,gBAC1B,SAACT,EAAA,GAAD,CAAcC,YAAa,UAAWC,cAAe9B,EAAO8B,cAAc,WAC7DrB,OAAQT,EAAOS,OAAON,MAAO4B,KAAM,SAC/C/B,EAAOS,OAAOH,SAAU,yBAAMN,EAAOS,OAAOH,UAAiB,SAGtE,iBAAKmB,UAAWC,EAAAA,YAAhB,WAEI,SAACY,EAAA,EAAD,CAAYP,KAAK,SAAjB,mBACCtC,IAAc,SAAC8C,EAAA,EAAD,KACf,iBAAKd,UAAWC,EAAAA,OAAhB,WACI,SAAC,KAAD,CAASD,UAAWC,EAAAA,QAAac,QAASlB,EAAeD,GAAI,WAA7D,+BACA,SAAC,KAAD,CAASI,UAAWC,EAAAA,QAAac,QAASlB,EAAeD,GAAI,YAA7D,uC,oBC7DpB,GAAeoB,EAAAA,EAAAA,KAPS,SAAC9C,GACrB,MAAO,CACHsB,OAAQtB,EAAMuB,KAAKD,OACnBzB,WAAYG,EAAMuB,KAAKZ,WAIS,CAACf,QAAAA,EAAAA,IAAzC,EAjB0C,SAAC,GAA2B,IAA1BA,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAGjD,OACI,+BACI,SAACF,EAAD,CAAWC,QAASA,EAASC,WAAYA","sources":["webpack://samurai-way/./src/components/SideWidgets/Login/LoginForm.module.scss?43eb","components/SideWidgets/Login/LoginForm.tsx","components/SideWidgets/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonBlock\":\"LoginForm_buttonBlock__1gjYZ\",\"forgot\":\"LoginForm_forgot__4knAg\",\"navlink\":\"LoginForm_navlink__2zOOc\"};","import React from 'react';\nimport {useFormik} from 'formik';\nimport {CheckboxFormik, InputFormik} from \"../../00-Common/InputFormik/InputFormik\";\nimport css from \"./LoginForm.module.scss\"\nimport {AuthButton} from \"../../00-Common/AuthButton/AuthButton\";\nimport {Navigate, NavLink} from \"react-router-dom\";\nimport {useAppSelector} from \"../../../hooks/hooks\";\nimport {PreloaderSmall} from \"../../00-Common/PreloaderSmall/PreloaderSmall\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\ntype LoginFormType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n    captchaUrl: string | null\n}\n\nexport const LoginForm: React.FC<LoginFormType> = ({loginTC, captchaUrl}) => {\n    const isFetching = useAppSelector(state => state.app.fetching)\n    console.log(\"RERENDER\")\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: \"\"\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'required';\n            } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'required'\n            } else if (values.password.trim().length < 4) {\n                errors.password = \"min 4 symbols\"\n            }\n            return errors\n        },\n        onSubmit: (values, onSubmitProps) => {\n            loginTC(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus, onSubmitProps.setSubmitting)\n            onSubmitProps.setSubmitting(true);\n        },\n    });\n    const isAuth = useAppSelector(state => state.auth.data.id)\n    if (isAuth) {\n        return <Navigate to={\"/profile/\" + isAuth}/>\n    }\n    console.log(isFetching)\n    const onCancelClick = () => {\n        formik.resetForm();\n        formik.setTouched({});\n    };\n    return (\n\n        <form className={css.loginForm} onSubmit={formik.handleSubmit}>\n            <InputFormik placeholder={\"email\"} getFieldProps={formik.getFieldProps(\"email\")}\n                         errors={formik.errors.email} type={\"text\"}/>\n            <InputFormik placeholder={\"password\"} getFieldProps={formik.getFieldProps(\"password\")}\n                         errors={formik.errors.password} type={\"password\"}/>\n\n            <CheckboxFormik label={\"Remember Me\"} getFieldProps={formik.getFieldProps(\"rememberMe\")}/>\n\n\n            {formik.status && <span style={{color: \"red\"}}>{formik.status}</span>}\n            {captchaUrl &&\n                <div className={css.fields}>\n                    <img src={captchaUrl} alt=\"captchaUrl\"/>\n                    <InputFormik  placeholder={\"captcha\"} getFieldProps={formik.getFieldProps(\"captcha\")}\n                                 errors={formik.errors.email} type={\"text\"}/>\n                    {formik.errors.captcha ? <div>{formik.errors.captcha}</div> : null}</div>\n            }\n\n            <div className={css.buttonBlock}>\n\n                <AuthButton type=\"submit\">Login</AuthButton>\n                {isFetching && <PreloaderSmall/>}\n                <div className={css.forgot}>\n                    <NavLink className={css.navlink} onClick={onCancelClick} to={\"/registr\"}>Register account</NavLink>\n                    <NavLink className={css.navlink} onClick={onCancelClick} to={\"/recovery\"}>Forget password</NavLink>\n                </div>\n            </div>\n        </form>\n    );\n};","import React from 'react';\nimport {LoginForm} from \"./LoginForm\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../../redux/auth-reducer\";\nimport {RootState} from \"../../../redux/redux-store\";\n\n\nconst Login: React.FC<ProfilePropsType> = ({loginTC, captchaUrl}) => {\n\n\n    return (\n        <>\n            <LoginForm loginTC={loginTC} captchaUrl={captchaUrl}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captcha\n    } as MapStateToPropsType\n}\n\nexport default connect(mapStateToProps, {loginTC})(Login)\n\n\n// types\ntype MapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: any\n}\n\ntype MapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType"],"names":["LoginForm","loginTC","captchaUrl","isFetching","useAppSelector","state","app","fetching","console","log","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","isAuth","auth","data","id","to","onCancelClick","resetForm","setTouched","className","css","handleSubmit","InputFormik","placeholder","getFieldProps","type","label","status","style","color","src","alt","AuthButton","PreloaderSmall","onClick","connect"],"sourceRoot":""}