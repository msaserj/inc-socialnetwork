{"version":3,"file":"static/js/839.331f3142.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogs.module.css?cfba","components/SideWidgets/Dialogs/Dialogitem/Dialogsitem.tsx","components/SideWidgets/Dialogs/Message/Messages.tsx","components/SideWidgets/Dialogs/Message/SendMessageForm.tsx","components/SideWidgets/Dialogs/DialogsContainer.tsx","components/SideWidgets/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__25un2\",\"dialogItems\":\"Dialogs_dialogItems__StBuM\",\"messages\":\"Dialogs_messages__6byBN\",\"message\":\"Dialogs_message__nb4Jx\",\"inactiveLink\":\"Dialogs_inactiveLink__Ellca\",\"activeLink\":\"Dialogs_activeLink__gpFHm\"};","import React from \"react\";\nimport css from '../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType, getMessagesListTC} from \"../../../../redux/dialogs-reducer\";\nimport {Button} from \"../../../00-Common/Button/Button\";\nimport {useAppDispatch} from \"../../../../hooks/hooks\";\nimport avaNeo from \"../../../../assets/images/avaNeo.png\";\n\ntype DialogsItemType = {\n    dialogItem: DialogsType\n}\n\nexport const DialogItem: React.FC<DialogsItemType> = (\n    {dialogItem}\n) => {\n    const {id, userName, photos,hasNewMessages, newMessagesCount, lastUserActivityDate, lastDialogActivityDate} = dialogItem\n    const dispatch = useAppDispatch()\n    let path = \"/dialogs/\" + id;\n    const startChat = () => {\n        dispatch(getMessagesListTC(id))\n    }\n\n    return <div className={css.activeLink}>\n        <div>\n            <Button onClick={startChat}>{userName}</Button>\n        </div>\n        <NavLink to={path}>\n            <img style={{width: \"80px\", height: \"80px\", borderRadius: \"50%\", border: \"3px solid grey\"}}\n                 src={photos.small != null ? photos.small : avaNeo} alt=\"PHOTO\"/>\n        </NavLink>\n\n        <div>{id}</div>\n        <div> {hasNewMessages? <span>Has New {newMessagesCount} messages</span>: <span>No messages</span>}</div>\n        <div>Activity  { new Date(lastUserActivityDate).toLocaleString()}</div>\n        <div>Dialog {  new Date(lastDialogActivityDate).toLocaleString() }</div>\n    </div>\n\n}","import React from \"react\";\nimport {MessageItemType} from \"../../../../redux/dialogs-reducer\";\n\ntype MessagessType = {\n    messagess: MessageItemType[]\n}\n\nexport const Messages: React.FC<MessagessType> = (\n    {messagess}\n    ) => {\n    return (\n        <>\n            messages\n            {messagess && messagess.map((e)=>{\n                return(\n                    <div style={{border: \"1px solid red\", margin: \"5px\"}} key={e.id}>\n                        <div style={{padding: \"5px\"}}>data {new Date(e.addedAt).toLocaleString()}</div>\n                        <div style={{padding: \"5px\"}}>message {e.body}</div>\n                        <div style={{padding: \"5px\"}}>senderName {e.senderName}</div>\n                        <div style={{padding: \"5px\"}}>viewed {e.viewed}</div>\n                    </div>\n                )\n            })}\n        </>\n\n    )\n}\n","import React, {useState} from 'react';\nimport {useAppDispatch} from \"../../../../hooks/hooks\";\nimport {TextAreaFormik} from \"../../../00-Common/InputFormik/InputFormik\";\nimport {Button} from \"../../../00-Common/Button/Button\";\nimport {sendMessageTC} from \"../../../../redux/dialogs-reducer\";\n\ntype SendMessageType = {\n    userId: number\n}\n\nconst SendMessageForm: React.FC<SendMessageType> = ({userId}) => {\n    const[message, setMessage] = useState('')\n\n\n    const dispatch = useAppDispatch()\n    console.log(\"SendMessageForm\", userId)\n\n    const sendMessageHandler = () => {\n      if(!message) {\n          return\n      } else {\n        dispatch(sendMessageTC(userId, message))\n      }\n    }\n\n    return (\n        <div>\n            <div>\n                <TextAreaFormik  onChange={(e)=>setMessage(e.currentTarget.value)} value={message} />\n                {/*<textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>*/}\n            </div>\n            <div>\n                <Button onClick={sendMessageHandler}>Send</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default SendMessageForm;","import React from \"react\";\nimport {\n    newTextMessageOnChange,\n    DialogsType,\n    getDialogsTC, sendMessageTC\n} from \"../../../redux/dialogs-reducer\";\nimport {RootState} from \"../../../redux/redux-store\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype MapStateToPropsType = {\n    dialogsPage: Array<DialogsType>\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    newTextMessageOnChange: (text: string) => void\n    sendMessageTC: (userId: number, messageBody: string) => void\n    getDialogsTC: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage.dialogs,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n}\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>\n    (mapStateToProps, {newTextMessageOnChange, sendMessageTC, getDialogsTC}), WithAuthRedirect)(Dialogs)\n\n","import React, {useEffect} from \"react\";\nimport classes from './Dialogs.module.css'\nimport {DialogItem} from \"./Dialogitem/Dialogsitem\";\nimport {Messages} from \"./Message/Messages\";\nimport {DialogsType, getDialogsTC, MessageItemType} from \"../../../redux/dialogs-reducer\";\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/hooks\";\n\nimport SendMessageForm from \"./Message/SendMessageForm\";\n\n\ntype DialogsPageType = {\n    newTextMessageOnChange: (newMessageText: string) => void\n    addMessageOnClick: () => void\n    isAuth: boolean\n    dialogs: Array<DialogsType>\n    messages: Array<MessageItemType>\n    getDialogs: () => void\n}\n\nexport const Dialogs = (props: DialogsPageType) => {\n\n    const dispatch = useAppDispatch()\n    const dialogss = useAppSelector(state => state.dialogsPage.dialogs)\n    const messagess = useAppSelector(state => state.dialogsPage.messages)\n    const userId = useAppSelector(state => state.dialogsPage.userId)\n\n\n\n    useEffect(() => {\n        dispatch(getDialogsTC())\n    }, [dispatch])\n    console.log(\"dialogs\", props.dialogs)\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogItems}>\n                {dialogss && dialogss.map(el => <DialogItem key={el.id} dialogItem={el}/>)}\n            </div>\n            <div className={classes.messages}>\n                <Messages messagess={messagess}/>\n                <SendMessageForm userId={userId}/>\n            </div>\n        </div>\n    )\n}"],"names":["DialogItem","dialogItem","id","userName","photos","hasNewMessages","newMessagesCount","lastUserActivityDate","lastDialogActivityDate","dispatch","useAppDispatch","path","className","css","Button","onClick","getMessagesListTC","to","style","width","height","borderRadius","border","src","small","avaNeo","alt","Date","toLocaleString","Messages","messagess","map","e","margin","padding","addedAt","body","senderName","viewed","userId","useState","message","setMessage","console","log","onChange","currentTarget","value","sendMessageTC","DialogsContainer","compose","connect","state","dialogsPage","dialogs","isAuth","auth","newTextMessageOnChange","getDialogsTC","WithAuthRedirect","props","dialogss","useAppSelector","messages","useEffect","classes","el"],"sourceRoot":""}