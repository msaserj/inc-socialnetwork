{"version":3,"file":"static/js/70.bc008419.chunk.js","mappings":"qMACA,GAAgB,YAAc,+BAA+B,OAAS,2B,mBCiBzDA,EAAqC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACzDC,QAAQC,IAAI,YACZ,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOL,MAEA,0CAA0CO,KAAKF,EAAOL,SAC9DM,EAAON,MAAQ,yBAFfM,EAAON,MAAQ,WAIdK,EAAOJ,SAEDI,EAAOJ,SAASO,OAAOC,OAAS,IACvCH,EAAOL,SAAW,iBAFlBK,EAAOL,SAAW,WAIfK,GAEXI,SAAU,SAACL,EAAQM,GACflB,EAAQY,EAAOL,MAAOK,EAAOJ,SAAUI,EAAOH,WAAYG,EAAOF,QAASQ,EAAcC,UAAWD,EAAcE,eACjHF,EAAcE,eAAc,MAIpC,OAEI,kBAAMC,UAAWC,EAAAA,UAAeL,SAAUb,EAAOmB,aAAjD,WACI,SAACC,EAAA,GAAD,CAAaC,YAAa,QAASC,cAAetB,EAAOsB,cAAc,SAC1Db,OAAQT,EAAOS,OAAON,MAAOoB,KAAM,UAChD,SAACH,EAAA,GAAD,CAAaC,YAAa,WAAYC,cAAetB,EAAOsB,cAAc,YAC7Db,OAAQT,EAAOS,OAAOL,SAAUmB,KAAM,cAEnD,SAAC,KAAD,CAAgBC,MAAO,cAAeF,cAAetB,EAAOsB,cAAc,iBAE1E,iBAAKL,UAAWC,EAAAA,OAAhB,UACKlB,EAAOyB,OACP5B,IACG,iBAAKoB,UAAWC,EAAAA,OAAhB,WACI,gBAAKQ,IAAK7B,EAAY8B,IAAI,gBAC1B,kBAAOC,QAAQ,UAAf,sBACA,0BAAOC,GAAG,UAAUN,KAAK,QACdvB,EAAOsB,cAAc,aAE/BtB,EAAOS,OAAOH,SAAU,yBAAMN,EAAOS,OAAOH,UAAiB,YAG1E,iBAAKW,UAAWC,EAAAA,YAAhB,WACI,SAACY,EAAA,EAAD,CAAYP,KAAK,SAAjB,oBACA,iBAAKN,UAAWC,EAAAA,OAAhB,WACI,uCACA,uD,oBCnDpB,GAAea,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBpC,WAAYmC,EAAME,KAAK5B,WAIS,CAACV,QAAAA,EAAAA,IAAzC,EAhB0C,SAAC,GAA2B,IAA1BA,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAEjD,OACI,+BACI,SAACF,EAAD,CAAWC,QAASA,EAASC,WAAYA","sources":["webpack://samurai-way/./src/components/02-Main/SideWidgets/Login/LoginForm.module.scss?d9c0","components/02-Main/SideWidgets/Login/LoginForm.tsx","components/02-Main/SideWidgets/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonBlock\":\"LoginForm_buttonBlock__LpA2j\",\"forgot\":\"LoginForm_forgot__HwwcF\"};","import React from 'react';\nimport {useFormik} from 'formik';\nimport {CheckboxFormik, InputFormik} from \"../../../00-Common/InputFormik/InputFormik\";\nimport css from \"./LoginForm.module.scss\"\nimport {AuthButton} from \"../../../00-Common/AuthButton/AuthButton\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\ntype LoginFormType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n    captchaUrl: string | null\n}\n\nexport const LoginForm: React.FC<LoginFormType> = ({loginTC, captchaUrl}) => {\n    console.log(\"RERENDER\")\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: \"\"\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'required';\n            } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'required'\n            } else if (values.password.trim().length < 5) {\n                errors.password = \"min 5 symbols\"\n            }\n            return errors;\n        },\n        onSubmit: (values, onSubmitProps) => {\n            loginTC(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus, onSubmitProps.setSubmitting)\n            onSubmitProps.setSubmitting(true);\n            // alert(JSON.stringify(values));\n        },\n    });\n    return (\n\n        <form className={css.loginForm} onSubmit={formik.handleSubmit}>\n            <InputFormik placeholder={\"email\"} getFieldProps={formik.getFieldProps(\"email\")}\n                         errors={formik.errors.email} type={\"text\"}/>\n            <InputFormik placeholder={\"password\"} getFieldProps={formik.getFieldProps(\"password\")}\n                         errors={formik.errors.password} type={\"password\"}/>\n\n            <CheckboxFormik label={\"Remember Me\"} getFieldProps={formik.getFieldProps(\"rememberMe\")}/>\n\n            <div className={css.fields}>\n                {formik.status}\n                {captchaUrl &&\n                    <div className={css.fields}>\n                        <img src={captchaUrl} alt=\"captchaUrl\"/>\n                        <label htmlFor=\"captcha\">Captcha</label>\n                        <input id=\"captcha\" type=\"text\"\n                               {...formik.getFieldProps(\"captcha\")}\n                        />\n                        {formik.errors.captcha ? <div>{formik.errors.captcha}</div> : null}</div>\n                }\n            </div>\n            <div className={css.buttonBlock}>\n                <AuthButton type=\"submit\">Login</AuthButton>\n                <div className={css.forgot}>\n                    <div>Register</div>\n                    <div>Forgot Password</div>\n                </div>\n            </div>\n        </form>\n    );\n};","import React from 'react';\nimport {LoginForm} from \"./LoginForm\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../../../redux/auth-reducer\";\nimport {RootState} from \"../../../../redux/redux-store\";\n\nconst Login: React.FC<ProfilePropsType> = ({loginTC, captchaUrl}) => {\n\n    return (\n        <>\n            <LoginForm loginTC={loginTC} captchaUrl={captchaUrl}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captcha\n    } as MapStateToPropsType\n}\n\nexport default connect(mapStateToProps, {loginTC})(Login)\n\n\n// types\ntype MapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: any\n}\n\ntype MapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: any, setSubmitting: any) => void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType"],"names":["LoginForm","loginTC","captchaUrl","console","log","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","className","css","handleSubmit","InputFormik","placeholder","getFieldProps","type","label","status","src","alt","htmlFor","id","AuthButton","connect","state","isAuth","auth"],"sourceRoot":""}