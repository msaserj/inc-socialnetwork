{"version":3,"file":"static/js/475.31dc3d19.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogs.module.scss?b8ad","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogitem/DialogItem.module.scss?96e7","components/00-Common/BeautyData/BeautyData.ts","components/SideWidgets/Dialogs/Dialogitem/Dialogsitem.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/Message.module.scss?b7da","components/SideWidgets/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/SendMessage.module.scss?6032","components/SideWidgets/Dialogs/Message/SendMessageForm.tsx","components/SideWidgets/Dialogs/Dialogs.tsx","components/SideWidgets/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gQwrs\",\"dialogWindow\":\"Dialogs_dialogWindow__mnf2+\",\"messagesWindow\":\"Dialogs_messagesWindow__Xvse5\",\"messages\":\"Dialogs_messages__r0PXH\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogBlock\":\"DialogItem_dialogBlock__NRaDx\",\"photoBlock\":\"DialogItem_photoBlock__cWJpe\",\"userPhoto\":\"DialogItem_userPhoto__TpOKh\",\"online\":\"DialogItem_online__kciUa\",\"aboutBlock\":\"DialogItem_aboutBlock__+I2WQ\",\"about\":\"DialogItem_about__KwyJj\",\"name\":\"DialogItem_name__KKYjb\",\"newMessages\":\"DialogItem_newMessages__sxz9l\"};","\nexport const BeautyDate = (date?: Date) => {\n    return new Date(date ? date : '').toLocaleString(\"en\", {\n        day: \"numeric\",\n        month: \"numeric\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false\n    })\n};\n\nexport const dateAgo = (date: any) => {\n    const time: number = Math.ceil( new Date().getTime() - new Date(date).getTime());\n    const last = Math.ceil(time/12960000)\n\n    if(last < 60) {\n        return last + \" min. ago\"\n    } else if(last > 60 && last < 1440) {\n        return Math.ceil(last / 60) + \" h ago\"\n    } else if (last > 1440 && last < 43200) {\n        return Math.ceil(last / 1440) + \" days ago\"\n    } else if (last > 43200 && last < 518400) {\n        return Math.ceil(last / 43200) + \" months ago\"\n    } else if (last > 518400) {\n        return new Date(date).toLocaleString(\"en\", {\n            day: \"numeric\",\n            month: \"numeric\",\n            year: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            hour12: false\n        })\n    }\n};\nexport const isOnline = (date: any) => {\n    const time: number = Math.ceil( new Date().getTime() - new Date(date).getTime());\n    return Math.ceil(time / 12960000) < 15\n\n};\n","import React from \"react\";\nimport css from './DialogItem.module.scss'\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType, putDialogTC} from \"../../../../redux/dialogs-reducer\";\nimport {useAppDispatch} from \"../../../../hooks/hooks\";\nimport avaNeo from \"../../../../assets/images/avaNeo.png\";\nimport {dateAgo, isOnline} from \"../../../00-Common/BeautyData/BeautyData\";\n\ntype DialogsItemType = {\n    dialogItem: DialogsType\n}\n\nexport const DialogItem: React.FC<DialogsItemType> = React.memo((\n    {dialogItem}\n) => {\n    const {\n        id,\n        photos,\n        userName,\n        hasNewMessages,\n        newMessagesCount,\n        lastUserActivityDate,\n        lastDialogActivityDate\n    } = dialogItem\n    const dispatch = useAppDispatch()\n    let path = \"/profile/\" + id;\n    const startChat = () => {\n        dispatch(putDialogTC(id))\n    }\n\n\n    const lastActivity = dateAgo(lastUserActivityDate)\n    const lastDialog = dateAgo(lastDialogActivityDate)\n\n    return (\n        <div className={css.dialogBlock}>\n\n            <div onClick={startChat} className={css.photoBlock}>\n                <img className={css.userPhoto}\n                     src={photos.small != null ? photos.small : avaNeo} alt=\"avatar\"/>\n                {isOnline(lastUserActivityDate) && <div className={css.online}></div>}\n            </div>\n\n            <div className={css.aboutBlock}>\n                <div className={css.about}>\n                    <NavLink to={path} title={\"see profile\"}>\n                        <h5 className={css.name}>{userName}</h5>\n                    </NavLink>\n\n\n                    <h6>Last: <span>{lastActivity}</span></h6>\n                    <h6>Dialog: <span>{lastDialog}</span></h6>\n\n                </div>\n\n                <div className={css.newMessages}> {hasNewMessages ?\n                    <span style={{color: \"limegreen\"}}>New {newMessagesCount} messages</span> : \"\"}</div>\n            </div>\n\n        </div>\n    )\n\n})","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Message_messageBlock__tr-dI\",\"nameData\":\"Message_nameData__+Dz7a\",\"name\":\"Message_name__Rq0ss\",\"dateAdd\":\"Message_dateAdd__aGmR+\",\"message\":\"Message_message__YdCvZ\",\"left\":\"Message_left__Cejf-\",\"right\":\"Message_right__PleNH\"};","import React from \"react\";\nimport {MessageItemType} from \"../../../../redux/dialogs-reducer\";\nimport css from \"./Message.module.scss\"\nimport {dateAgo} from \"../../../00-Common/BeautyData/BeautyData\";\n\ntype MessageType = {\n    message: MessageItemType\n    userId: number\n}\n\nexport const Message: React.FC<MessageType> = (\n    {message, userId}\n) => {\n\n    const style = message.senderId === userId ? css.right : css.left\n\n    return(\n        <div className={`${css.messageBlock} ${style}`} key={message.id}>\n            <div className={css.nameData}>\n                <h5 className={css.name}>{message.senderName}</h5>\n                <span className={css.dateAdd}>{dateAgo(message.addedAt)}</span>\n            </div>\n            <div className={css.body}>\n                <p className={css.message}>{message.body}</p>\n            </div>\n\n            {/*<div className={css.viewed}>viewed {message.viewed}</div>*/}\n        </div>\n        )\n\n\n\n\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"sendMessage\":\"SendMessage_sendMessage__rjtdj\",\"buttonBlock\":\"SendMessage_buttonBlock__8ndoV\"};","import React, {useState} from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../../../hooks/hooks\";\nimport {TextAreaFormik} from \"../../../00-Common/InputFormik/InputFormik\";\nimport {Button} from \"../../../00-Common/Button/Button\";\nimport {sendMessageTC} from \"../../../../redux/dialogs-reducer\";\nimport css from \"./SendMessage.module.scss\"\n\ntype SendMessageType = {\n    userId: number\n}\n\nconst SendMessageForm: React.FC<SendMessageType> = ({userId}) => {\n\n    const isFetching = useAppSelector(state => state.dialogsPage.isFetching)\n\n    const[message, setMessage] = useState('')\n    const dispatch = useAppDispatch()\n    console.log(\"SendMessageForm\", userId)\n\n    const sendMessageHandler = () => {\n      if(!message) {\n          return\n      } else {\n        dispatch(sendMessageTC(userId, message))\n          setMessage('')\n      }\n    }\n\n    return (\n        <div className={css.sendMessage}>\n            <div>\n                <TextAreaFormik  onChange={(e)=>setMessage(e.currentTarget.value)} value={message} />\n                {/*<textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>*/}\n            </div>\n            <div className={css.buttonBlock}>\n                <Button disabled={isFetching} onClick={sendMessageHandler}>Send</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default SendMessageForm;","import React, {useEffect, useRef, useState} from \"react\";\nimport css from './Dialogs.module.scss'\nimport {DialogItem} from \"./Dialogitem/Dialogsitem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsType, getDialogsTC, MessageItemType} from \"../../../redux/dialogs-reducer\";\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/hooks\";\n\nimport SendMessageForm from \"./Message/SendMessageForm\";\n\n\ntype DialogsPageType = {\n    newTextMessageOnChange: (newMessageText: string) => void\n    addMessageOnClick: () => void\n    isAuth: boolean\n    dialogs: Array<DialogsType>\n    messages: Array<MessageItemType>\n    getDialogs: () => void\n}\n\nexport const Dialogs = React.memo((props: DialogsPageType) => {\n\n    const dispatch = useAppDispatch()\n    const dialogs= useAppSelector(state => state.dialogsPage.dialogs)\n    const messages = useAppSelector(state => state.dialogsPage.messages)\n    const userId = useAppSelector(state => state.dialogsPage.userId)\n    const totalCount = useAppSelector(state => state.dialogsPage.totalCount)\n\n\n    const [autoScroll, setAutoScroll] = useState(true)\n\n    const [autoPage, setAutoPage] = useState(1)\n\n    const topAnchorRef = useRef<HTMLDivElement>(null)\n    const bottomAnchorRef = useRef<HTMLDivElement>(null)\n\n\n\n    const scrollBottomHandler = (e: React.UIEvent<HTMLDivElement>) => {\n        let element = e.currentTarget\n        if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n            !autoScroll && setAutoScroll(true)\n            setAutoPage(autoPage-1)\n            // dispatch(getMessagesListTC(userId, 10, autoPage))\n        } else {\n            autoScroll && setAutoScroll(false)\n        }\n\n        if(element.scrollTop < 0 && totalCount > autoPage*10) {\n            setAutoPage(autoPage+1)\n            // dispatch(getMessagesListTC(userId, 10, autoPage))\n        }\n\n    }\n    useEffect(()=> {\n        autoScroll && bottomAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n    },[messages, autoScroll])\n\n\n    useEffect(() => {\n        dispatch(getDialogsTC())\n    }, [dispatch, userId])\n    return (\n        <div className={css.dialogs}>\n            <div style={{height: '650px', overflowY: 'auto'}} className={css.dialogWindow}>\n                {dialogs && dialogs.map(el => <DialogItem key={el.id} dialogItem={el}/>)}\n            </div>\n            <div className={css.messagesWindow}>\n                <div style={{height: '480px', overflowY: \"auto\"}} className={css.messages} onScroll={scrollBottomHandler} >\n                    <div ref={topAnchorRef}></div>\n                    {messages && messages.map(el => <Message key={el.id}  message={el} userId={userId}/>)}\n                    <div ref={bottomAnchorRef}></div>\n                </div>\n                <SendMessageForm userId={userId}/>\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {\n    newTextMessageOnChange,\n    DialogsType,\n    getDialogsTC, sendMessageTC\n} from \"../../../redux/dialogs-reducer\";\nimport {RootState} from \"../../../redux/redux-store\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype MapStateToPropsType = {\n    dialogsPage: Array<DialogsType>\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    newTextMessageOnChange: (text: string) => void\n    sendMessageTC: (userId: number, messageBody: string) => void\n    getDialogsTC: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage.dialogs,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n}\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>\n    (mapStateToProps, {newTextMessageOnChange, sendMessageTC, getDialogsTC}), WithAuthRedirect)(Dialogs)\n\n"],"names":["dateAgo","date","time","Math","ceil","Date","getTime","last","toLocaleString","day","month","year","hour","minute","hour12","isOnline","DialogItem","React","dialogItem","id","photos","userName","hasNewMessages","newMessagesCount","lastUserActivityDate","lastDialogActivityDate","dispatch","useAppDispatch","path","lastActivity","lastDialog","className","css","onClick","putDialogTC","src","small","avaNeo","alt","to","title","style","color","Message","message","userId","senderId","senderName","addedAt","body","isFetching","useAppSelector","state","dialogsPage","useState","setMessage","console","log","onChange","e","currentTarget","value","Button","disabled","sendMessageTC","Dialogs","props","dialogs","messages","totalCount","autoScroll","setAutoScroll","autoPage","setAutoPage","topAnchorRef","useRef","bottomAnchorRef","useEffect","current","scrollIntoView","behavior","getDialogsTC","height","overflowY","map","el","onScroll","element","scrollHeight","scrollTop","clientHeight","ref","DialogsContainer","compose","connect","isAuth","auth","newTextMessageOnChange","WithAuthRedirect"],"sourceRoot":""}