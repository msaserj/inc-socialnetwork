{"version":3,"file":"static/js/207.7482d1a5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Login/LoginForm.module.scss?d224","components/SideWidgets/Login/LoginForm.tsx","components/SideWidgets/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonBlock\":\"LoginForm_buttonBlock__1gjYZ\",\"forgot\":\"LoginForm_forgot__4knAg\",\"navlink\":\"LoginForm_navlink__2zOOc\"};","import React from 'react';\nimport { useFormik } from 'formik';\nimport { CheckboxFormik, InputFormik } from '../../00-Common/InputFormik/InputFormik';\nimport css from './LoginForm.module.scss';\nimport { AuthButton } from '../../00-Common/AuthButton/AuthButton';\nimport { Navigate, NavLink } from 'react-router-dom';\nimport { useAppSelector } from '../../../hooks/hooks';\nimport { PreloaderSmall } from '../../00-Common/PreloaderSmall/PreloaderSmall';\n\ntype FormikErrorType = {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n  captcha?: string;\n};\n\ntype LoginFormType = {\n  loginTC: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string,\n    setStatus: any,\n    setSubmitting: any\n  ) => void;\n  captchaUrl: string | null;\n};\n\nexport const LoginForm: React.FC<LoginFormType> = ({ loginTC, captchaUrl }) => {\n  const isFetching = useAppSelector(state => state.app.fetching);\n  console.log('RERENDER');\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n      captcha: ''\n    },\n    validate: values => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'required';\n      } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'required';\n      } else if (values.password.trim().length < 4) {\n        errors.password = 'min 4 symbols';\n      }\n      return errors;\n    },\n    onSubmit: (values, onSubmitProps) => {\n      loginTC(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha,\n        onSubmitProps.setStatus,\n        onSubmitProps.setSubmitting\n      );\n      onSubmitProps.setSubmitting(true);\n    }\n  });\n  const isAuth = useAppSelector(state => state.auth.data.id);\n  if (isAuth) {\n    return <Navigate to={'/profile/' + isAuth} />;\n  }\n  console.log(isFetching);\n  const onCancelClick = () => {\n    formik.resetForm();\n    formik.setTouched({});\n  };\n  return (\n    <form className={css.loginForm} onSubmit={formik.handleSubmit}>\n      <InputFormik\n        placeholder={'email'}\n        getFieldProps={formik.getFieldProps('email')}\n        errors={formik.errors.email}\n        type={'text'}\n      />\n      <InputFormik\n        placeholder={'password'}\n        getFieldProps={formik.getFieldProps('password')}\n        errors={formik.errors.password}\n        type={'password'}\n      />\n\n      <CheckboxFormik label={'Remember Me'} getFieldProps={formik.getFieldProps('rememberMe')} />\n\n      {formik.status && <span style={{ color: 'red' }}>{formik.status}</span>}\n      {captchaUrl && (\n        <div className={css.fields}>\n          <img src={captchaUrl} alt=\"captchaUrl\" />\n          <InputFormik\n            placeholder={'captcha'}\n            getFieldProps={formik.getFieldProps('captcha')}\n            errors={formik.errors.email}\n            type={'text'}\n          />\n          {formik.errors.captcha ? <div>{formik.errors.captcha}</div> : null}\n        </div>\n      )}\n\n      <div className={css.buttonBlock}>\n        <AuthButton type=\"submit\">Login</AuthButton>\n        {isFetching && <PreloaderSmall />}\n        <div className={css.forgot}>\n          <NavLink className={css.navlink} onClick={onCancelClick} to={'/registr'}>\n            Register account\n          </NavLink>\n          <NavLink className={css.navlink} onClick={onCancelClick} to={'/recovery'}>\n            Forget password\n          </NavLink>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { LoginForm } from './LoginForm';\nimport { connect } from 'react-redux';\nimport { loginTC } from '../../../redux/auth-reducer';\nimport { RootState } from '../../../redux/redux-store';\n\nconst Login: React.FC<ProfilePropsType> = ({ loginTC, captchaUrl }) => {\n  return (\n    <>\n      <LoginForm loginTC={loginTC} captchaUrl={captchaUrl} />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n  return {\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captcha\n  } as MapStateToPropsType;\n};\n\nexport default connect(mapStateToProps, { loginTC })(Login);\n\n// types\ntype MapStateToPropsType = {\n  isAuth: boolean;\n  captchaUrl: any;\n};\n\ntype MapDispatchToPropsType = {\n  loginTC: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string,\n    setStatus: any,\n    setSubmitting: any\n  ) => void;\n};\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType;\n"],"names":["LoginForm","_ref","loginTC","captchaUrl","isFetching","useAppSelector","state","app","fetching","console","log","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","isAuth","auth","data","id","_jsx","Navigate","to","onCancelClick","resetForm","setTouched","_jsxs","className","css","handleSubmit","children","InputFormik","placeholder","getFieldProps","type","CheckboxFormik","label","status","style","color","src","alt","AuthButton","PreloaderSmall","NavLink","onClick","connect","_Fragment"],"sourceRoot":""}