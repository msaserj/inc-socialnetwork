{"version":3,"file":"static/js/904.4d1734c9.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogs.module.scss?b8ad","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogitem/DialogItem.module.scss?96e7","components/SideWidgets/Dialogs/Dialogitem/Dialogsitem.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/Messages.module.scss?0a83","components/SideWidgets/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/SendMessage.module.scss?6032","components/SideWidgets/Dialogs/Message/SendMessageForm.tsx","components/SideWidgets/Dialogs/Dialogs.tsx","components/SideWidgets/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gQwrs\",\"dialogWindow\":\"Dialogs_dialogWindow__mnf2+\",\"messagesWindow\":\"Dialogs_messagesWindow__Xvse5\",\"messages\":\"Dialogs_messages__r0PXH\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogBlock\":\"DialogItem_dialogBlock__NRaDx\",\"photoBlock\":\"DialogItem_photoBlock__cWJpe\",\"userPhoto\":\"DialogItem_userPhoto__TpOKh\",\"aboutBlock\":\"DialogItem_aboutBlock__+I2WQ\",\"name\":\"DialogItem_name__KKYjb\",\"status\":\"DialogItem_status__rf9K0\"};","import React from \"react\";\nimport css from './DialogItem.module.scss'\nimport {NavLink} from \"react-router-dom\";\nimport {DialogsType, putDialogTC} from \"../../../../redux/dialogs-reducer\";\nimport {useAppDispatch} from \"../../../../hooks/hooks\";\nimport avaNeo from \"../../../../assets/images/avaNeo.png\";\n\ntype DialogsItemType = {\n    dialogItem: DialogsType\n}\n\nexport const DialogItem: React.FC<DialogsItemType> = React.memo((\n    {dialogItem}\n) => {\n    const {\n        id,\n        photos,\n        hasNewMessages,\n        newMessagesCount,\n        lastUserActivityDate,\n        lastDialogActivityDate\n    } = dialogItem\n    const dispatch = useAppDispatch()\n    let path = \"/profile/\" + id;\n    const startChat = () => {\n        dispatch(putDialogTC(id))\n    }\n\n    return (\n        <div className={css.dialogBlock}>\n            <div onClick={startChat} className={css.photoBlock}>\n                <img className={css.userPhoto}\n                     src={photos.small != null ? photos.small : avaNeo} alt=\"avatar\"/>\n                <NavLink to={path}>profile</NavLink>\n            </div>\n\n            <div>\n                <div> {hasNewMessages ? <span style={{color: \"limegreen\"}}>Has New {newMessagesCount} messages</span> : \"\"}</div>\n                <div>Activity {new Date(lastUserActivityDate).toLocaleString()}</div>\n                <div>Dialog {new Date(lastDialogActivityDate).toLocaleString()}</div>\n            </div>\n\n        </div>\n    )\n\n})","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Messages_messageBlock__7FVWa\"};","import React from \"react\";\nimport {MessageItemType} from \"../../../../redux/dialogs-reducer\";\nimport css from \"./Messages.module.scss\"\n\ntype MessageType = {\n    message: MessageItemType\n}\n\nexport const Message: React.FC<MessageType> = (\n    {message}\n) => {\n    return <div className={css.messageBlock} key={message.id}>\n        <div style={{padding: \"5px\"}}>data {new Date(message.addedAt).toLocaleString()}</div>\n        <p style={{padding: \"5px\"}}>message {message.body}</p>\n        <div style={{padding: \"5px\"}}>senderName {message.senderName}</div>\n        <div style={{padding: \"5px\"}}>viewed {message.viewed}</div>\n    </div>\n\n\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"sendMessage\":\"SendMessage_sendMessage__rjtdj\",\"buttonBlock\":\"SendMessage_buttonBlock__8ndoV\"};","import React, {useState} from 'react';\nimport {useAppDispatch} from \"../../../../hooks/hooks\";\nimport {TextAreaFormik} from \"../../../00-Common/InputFormik/InputFormik\";\nimport {Button} from \"../../../00-Common/Button/Button\";\nimport {sendMessageTC} from \"../../../../redux/dialogs-reducer\";\nimport css from \"./SendMessage.module.scss\"\n\ntype SendMessageType = {\n    userId: number\n}\n\nconst SendMessageForm: React.FC<SendMessageType> = ({userId}) => {\n    const[message, setMessage] = useState('')\n\n\n    const dispatch = useAppDispatch()\n    console.log(\"SendMessageForm\", userId)\n\n    const sendMessageHandler = () => {\n      if(!message) {\n          return\n      } else {\n        dispatch(sendMessageTC(userId, message))\n          setMessage('')\n      }\n    }\n\n    return (\n        <div className={css.sendMessage}>\n            <div>\n                <TextAreaFormik  onChange={(e)=>setMessage(e.currentTarget.value)} value={message} />\n                {/*<textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>*/}\n            </div>\n            <div className={css.buttonBlock}>\n                <Button onClick={sendMessageHandler}>Send</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default SendMessageForm;","import React, {useEffect, useRef, useState} from \"react\";\nimport css from './Dialogs.module.scss'\nimport {DialogItem} from \"./Dialogitem/Dialogsitem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsType, getDialogsTC, MessageItemType} from \"../../../redux/dialogs-reducer\";\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/hooks\";\n\nimport SendMessageForm from \"./Message/SendMessageForm\";\n\n\ntype DialogsPageType = {\n    newTextMessageOnChange: (newMessageText: string) => void\n    addMessageOnClick: () => void\n    isAuth: boolean\n    dialogs: Array<DialogsType>\n    messages: Array<MessageItemType>\n    getDialogs: () => void\n}\n\nexport const Dialogs = React.memo((props: DialogsPageType) => {\n\n    const dispatch = useAppDispatch()\n    const dialogss = useAppSelector(state => state.dialogsPage.dialogs)\n    const messagess = useAppSelector(state => state.dialogsPage.messages)\n    const userId = useAppSelector(state => state.dialogsPage.userId)\n\n    const [autoScroll, setAutoScroll] = useState(false)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\n        let element = e.currentTarget\n        if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n            !autoScroll && setAutoScroll(true)\n        } else {\n            autoScroll && setAutoScroll(false)\n\n        }\n    }\n    useEffect(()=> {\n        autoScroll && messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n    },[messagess, autoScroll])\n\n\n    useEffect(() => {\n        dispatch(getDialogsTC())\n    }, [dispatch, userId])\n    console.log(\"dialogs rendered\")\n    return (\n        <div className={css.dialogs}>\n            <div style={{height: '650px', overflowY: 'auto'}} className={css.dialogWindow}>\n                {dialogss && dialogss.map(el => <DialogItem key={el.id} dialogItem={el}/>)}\n            </div>\n            <div className={css.messagesWindow}>\n                <div style={{height: '400px', overflowY: \"auto\"}} className={css.messages} onScroll={scrollHandler} >\n                    {messagess && messagess.map(el => <Message key={el.id}  message={el}/>)}\n                    <div ref={messagesAnchorRef}></div>\n                </div>\n                <SendMessageForm userId={userId}/>\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {\n    newTextMessageOnChange,\n    DialogsType,\n    getDialogsTC, sendMessageTC\n} from \"../../../redux/dialogs-reducer\";\nimport {RootState} from \"../../../redux/redux-store\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype MapStateToPropsType = {\n    dialogsPage: Array<DialogsType>\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    newTextMessageOnChange: (text: string) => void\n    sendMessageTC: (userId: number, messageBody: string) => void\n    getDialogsTC: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage.dialogs,\n        isAuth: state.auth.isAuth\n    } as MapStateToPropsType\n}\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>\n    (mapStateToProps, {newTextMessageOnChange, sendMessageTC, getDialogsTC}), WithAuthRedirect)(Dialogs)\n\n"],"names":["DialogItem","React","dialogItem","id","photos","hasNewMessages","newMessagesCount","lastUserActivityDate","lastDialogActivityDate","dispatch","useAppDispatch","path","className","css","onClick","putDialogTC","src","small","avaNeo","alt","to","style","color","Date","toLocaleString","Message","message","padding","addedAt","body","senderName","viewed","userId","useState","setMessage","console","log","onChange","e","currentTarget","value","Button","sendMessageTC","Dialogs","props","dialogss","useAppSelector","state","dialogsPage","dialogs","messagess","messages","autoScroll","setAutoScroll","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","getDialogsTC","height","overflowY","map","el","onScroll","element","scrollHeight","scrollTop","clientHeight","ref","DialogsContainer","compose","connect","isAuth","auth","newTextMessageOnChange","WithAuthRedirect"],"sourceRoot":""}