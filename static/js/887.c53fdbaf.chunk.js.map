{"version":3,"file":"static/js/887.c53fdbaf.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogs.module.scss?0fcc","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Dialogitem/DialogItem.module.scss?4c9b","utils/BeautyData/BeautyData.ts","components/SideWidgets/Dialogs/Dialogitem/Dialogsitem.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/Message.module.scss?c42f","components/SideWidgets/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/SideWidgets/Dialogs/Message/SendMessage.module.scss?9a2b","components/SideWidgets/Dialogs/Message/SendMessageForm.tsx","components/SideWidgets/Dialogs/Dialogs.tsx","components/SideWidgets/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gQwrs\",\"dialogWindow\":\"Dialogs_dialogWindow__mnf2+\",\"messagesWindow\":\"Dialogs_messagesWindow__Xvse5\",\"messages\":\"Dialogs_messages__r0PXH\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogBlock\":\"DialogItem_dialogBlock__NRaDx\",\"photoBlock\":\"DialogItem_photoBlock__cWJpe\",\"userPhoto\":\"DialogItem_userPhoto__TpOKh\",\"online\":\"DialogItem_online__kciUa\",\"aboutBlock\":\"DialogItem_aboutBlock__+I2WQ\",\"about\":\"DialogItem_about__KwyJj\",\"name\":\"DialogItem_name__KKYjb\",\"newMessages\":\"DialogItem_newMessages__sxz9l\"};","export const BeautyDate = (date?: Date) => {\n  return new Date(date ? date : '').toLocaleString('en', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n};\n\nexport const dateAgo = (date: any) => {\n  const time: number = Math.ceil(new Date().getTime() - new Date(date).getTime());\n  const last = Math.ceil(time / 1000);\n  if (last < 60) {\n    return last + ' min. ago';\n  } else if (last > 60 && last < 1440) {\n    return Math.ceil(last / 60) + ' h ago';\n  } else if (last > 1440 && last < 43200) {\n    return Math.ceil(last / 1440) + ' days ago';\n  } else if (last > 43200 && last < 518400) {\n    return Math.ceil(last / 43200) + ' months ago';\n  } else if (last > 518400) {\n    return new Date(date).toLocaleString('en', {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  }\n};\nexport const isOnline = (date: any) => {\n  const time: number = Math.ceil(new Date().getTime() - new Date(date).getTime());\n  return Math.ceil(time / 1000000) < 15;\n};\n","import React from 'react';\nimport css from './DialogItem.module.scss';\nimport { NavLink } from 'react-router-dom';\nimport { DialogsType, putDialogTC } from '../../../../redux/dialogs-reducer';\nimport { useAppDispatch } from '../../../../hooks/hooks';\nimport avaNeo from '../../../../assets/images/avaNeo.png';\nimport { dateAgo, isOnline } from '../../../../utils/BeautyData/BeautyData';\n\ntype DialogsItemType = {\n  dialogItem: DialogsType;\n};\n\nexport const DialogItem: React.FC<DialogsItemType> = React.memo(({ dialogItem }) => {\n  const { id, photos, userName, hasNewMessages, newMessagesCount, lastUserActivityDate, lastDialogActivityDate } =\n    dialogItem;\n  const dispatch = useAppDispatch();\n  let path = '/profile/' + id;\n  const startChat = () => {\n    dispatch(putDialogTC(id));\n  };\n\n  const lastActivity = dateAgo(lastUserActivityDate);\n  const lastDialog = dateAgo(lastDialogActivityDate);\n  const time: number = Math.ceil(new Date(lastDialogActivityDate).getTime());\n\n  return (\n    <div className={css.dialogBlock}>\n      <div onClick={startChat} className={css.photoBlock}>\n        <img className={css.userPhoto} src={photos.small != null ? photos.small : avaNeo} alt=\"avatar\" />\n        {isOnline(lastUserActivityDate) && <div className={css.online}></div>}\n      </div>\n\n      <div className={css.aboutBlock}>\n        <div className={css.about}>\n          <NavLink to={path} title={'see profile'}>\n            <h5 className={css.name}>{userName}</h5>\n          </NavLink>\n\n          <h6>\n            Last: <span>{lastActivity}</span>\n          </h6>\n          <h6>\n            Dialog: <span>{lastDialog}</span>\n          </h6>\n        </div>\n\n        <div className={css.newMessages}>\n          {' '}\n          {hasNewMessages ? <span style={{ color: 'limegreen' }}>New {newMessagesCount} messages</span> : ''}\n        </div>\n      </div>\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Message_messageBlock__tr-dI\",\"nameData\":\"Message_nameData__+Dz7a\",\"name\":\"Message_name__Rq0ss\",\"dateAdd\":\"Message_dateAdd__aGmR+\",\"message\":\"Message_message__YdCvZ\",\"left\":\"Message_left__Cejf-\",\"right\":\"Message_right__PleNH\"};","import React from 'react';\nimport { MessageItemType } from '../../../../redux/dialogs-reducer';\nimport css from './Message.module.scss';\nimport { dateAgo } from '../../../../utils/BeautyData/BeautyData';\n\ntype MessageType = {\n  message: MessageItemType;\n  userId: number;\n};\n\nexport const Message: React.FC<MessageType> = ({ message, userId }) => {\n  const style = message.senderId === userId ? css.right : css.left;\n\n  return (\n    <div className={`${css.messageBlock} ${style}`} key={message.id}>\n      <div className={css.nameData}>\n        <h5 className={css.name}>{message.senderName}</h5>\n        <span className={css.dateAdd}>{dateAgo(message.addedAt)}</span>\n      </div>\n      <div className={css.body}>\n        <p className={css.message}>{message.body}</p>\n      </div>\n\n      {/*<div className={css.viewed}>viewed {message.viewed}</div>*/}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sendMessage\":\"SendMessage_sendMessage__rjtdj\",\"buttonBlock\":\"SendMessage_buttonBlock__8ndoV\"};","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/hooks';\nimport { TextAreaFormik } from '../../../00-Common/InputFormik/InputFormik';\nimport { Button } from '../../../00-Common/Button/Button';\nimport { sendMessageTC } from '../../../../redux/dialogs-reducer';\nimport css from './SendMessage.module.scss';\n\ntype SendMessageType = {\n  userId: number;\n};\n\nconst SendMessageForm: React.FC<SendMessageType> = ({ userId }) => {\n  const isFetching = useAppSelector(state => state.dialogsPage.isFetching);\n  const [message, setMessage] = useState('');\n  const dispatch = useAppDispatch();\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    } else {\n      dispatch(sendMessageTC(userId, message));\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className={css.sendMessage}>\n      <div>\n        <TextAreaFormik onChange={e => setMessage(e.currentTarget.value)} value={message} />\n        {/*<textarea onChange={(e)=>setMessage(e.currentTarget.value)} value={message}></textarea>*/}\n      </div>\n      <div className={css.buttonBlock}>\n        <Button disabled={isFetching} onClick={sendMessageHandler}>\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SendMessageForm;\n","import React, { useEffect, useRef, useState } from 'react';\nimport css from './Dialogs.module.scss';\nimport { DialogItem } from './Dialogitem/Dialogsitem';\nimport { Message } from './Message/Message';\nimport { DialogsType, getDialogsTC, MessageItemType } from '../../../redux/dialogs-reducer';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\n\nimport SendMessageForm from './Message/SendMessageForm';\n\ntype DialogsPageType = {\n  newTextMessageOnChange: (newMessageText: string) => void;\n  addMessageOnClick: () => void;\n  isAuth: boolean;\n  dialogs: Array<DialogsType>;\n  messages: Array<MessageItemType>;\n  getDialogs: () => void;\n};\n\nexport const Dialogs = React.memo((props: DialogsPageType) => {\n  const dispatch = useAppDispatch();\n  const dialogs = useAppSelector(state => state.dialogsPage.dialogs);\n  const messages = useAppSelector(state => state.dialogsPage.messages);\n  const userId = useAppSelector(state => state.dialogsPage.userId);\n  const totalCount = useAppSelector(state => state.dialogsPage.totalCount);\n\n  const [autoScroll, setAutoScroll] = useState(true);\n\n  const [autoPage, setAutoPage] = useState(1);\n\n  const topAnchorRef = useRef<HTMLDivElement>(null);\n  const bottomAnchorRef = useRef<HTMLDivElement>(null);\n\n  const scrollBottomHandler = (e: React.UIEvent<HTMLDivElement>) => {\n    let element = e.currentTarget;\n\n    if (element.scrollTop <= 0 && totalCount > autoPage * 10) {\n      setAutoPage(autoPage + 1);\n      // dispatch(getMessagesListTC(userId, 10, autoPage))\n    }\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n      !autoScroll && setAutoScroll(true);\n      // setAutoPage(autoPage-1)\n      // dispatch(getMessagesListTC(userId, 10, autoPage))\n    } else {\n      autoScroll && setAutoScroll(false);\n    }\n  };\n  useEffect(() => {\n    autoScroll && bottomAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages, autoScroll]);\n\n  useEffect(() => {\n    dispatch(getDialogsTC());\n  }, [dispatch, userId]);\n  return (\n    <div className={css.dialogs}>\n      <div style={{ height: '650px', overflowY: 'auto' }} className={css.dialogWindow}>\n        {dialogs && dialogs.map(el => <DialogItem key={el.id} dialogItem={el} />)}\n      </div>\n      <div className={css.messagesWindow}>\n        <div style={{ height: '480px', overflowY: 'auto' }} className={css.messages} onScroll={scrollBottomHandler}>\n          <div ref={topAnchorRef}></div>\n          {messages && messages.map(el => <Message key={el.id} message={el} userId={userId} />)}\n          <div ref={bottomAnchorRef}></div>\n        </div>\n        <SendMessageForm userId={userId} />\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { newTextMessageOnChange, DialogsType, getDialogsTC, sendMessageTC } from '../../../redux/dialogs-reducer';\nimport { RootState } from '../../../redux/redux-store';\nimport { Dialogs } from './Dialogs';\nimport { connect } from 'react-redux';\nimport { WithAuthRedirect } from '../../../hoc/WithAuthRedirect';\nimport { compose } from 'redux';\n\ntype MapStateToPropsType = {\n  dialogsPage: Array<DialogsType>;\n  isAuth: boolean;\n};\ntype MapDispatchToPropsType = {\n  newTextMessageOnChange: (text: string) => void;\n  sendMessageTC: (userId: number, messageBody: string) => void;\n  getDialogsTC: () => void;\n};\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n  return {\n    dialogsPage: state.dialogsPage.dialogs,\n    isAuth: state.auth.isAuth\n  } as MapStateToPropsType;\n};\n\n// compose allows us to add new HOCs, that is wrap our component to HOCs with universal options\n\nexport const DialogsContainer = compose(\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootState>(mapStateToProps, {\n    newTextMessageOnChange,\n    sendMessageTC,\n    getDialogsTC\n  }),\n  WithAuthRedirect\n)(Dialogs);\n"],"names":["dateAgo","date","time","Math","ceil","Date","getTime","last","toLocaleString","day","month","year","hour","minute","hour12","isOnline","DialogItem","React","_ref","dialogItem","id","photos","userName","hasNewMessages","newMessagesCount","lastUserActivityDate","lastDialogActivityDate","dispatch","useAppDispatch","path","lastActivity","lastDialog","_jsxs","className","css","children","onClick","putDialogTC","_jsx","src","small","avaNeo","alt","NavLink","to","title","style","color","Message","message","userId","senderId","concat","senderName","addedAt","body","isFetching","useAppSelector","state","dialogsPage","_useState","useState","_useState2","_slicedToArray","setMessage","TextAreaFormik","onChange","e","currentTarget","value","Button","disabled","sendMessageTC","Dialogs","props","dialogs","messages","totalCount","autoScroll","setAutoScroll","_useState3","_useState4","autoPage","setAutoPage","topAnchorRef","useRef","bottomAnchorRef","useEffect","_bottomAnchorRef$curr","current","scrollIntoView","behavior","getDialogsTC","height","overflowY","map","el","onScroll","element","scrollTop","scrollHeight","clientHeight","ref","SendMessageForm","DialogsContainer","compose","connect","isAuth","auth","newTextMessageOnChange","WithAuthRedirect"],"sourceRoot":""}