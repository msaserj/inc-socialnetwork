{"version":3,"file":"static/js/12.9147a0e3.chunk.js","mappings":"2LACA,EAAyB,0B,SCcZA,EAAqC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAChDC,QAAQC,IAAI,YACZ,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,0CAA0CM,KAAKF,EAAOJ,SAC9DK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASM,OAAOC,OAAS,IACvCH,EAAOJ,SAAW,iBAFlBI,EAAOJ,SAAW,WAIfI,GAEXI,SAAU,SAACL,EAAOM,GACdhB,EAAQU,EAAOJ,MAAOI,EAAOH,SAAUG,EAAOF,WAAYQ,EAAcC,UAAWD,EAAcE,eACjGF,EAAcE,eAAc,MAIpC,OACI,kBAAMH,SAAUZ,EAAOgB,aAAvB,WACI,iBAAKC,UAAWC,EAAhB,eAA6B,kBAAOC,QAAQ,QAAf,oBACzB,0BAAOC,GAAG,QAAQC,KAAK,SACfrB,EAAOsB,cAAc,WAE5BtB,EAAOQ,OAAOL,OAAQ,yBAAMH,EAAOQ,OAAOL,QAAe,SAC9D,iBAAMc,UAAWC,EAAjB,eAA8B,kBAAOC,QAAQ,WAAf,uBAC1B,0BAAOC,GAAG,WAAWC,KAAK,YAClBrB,EAAOsB,cAAc,cAE5BtB,EAAOQ,OAAOJ,UAAW,yBAAMJ,EAAOQ,OAAOJ,WAAkB,SACpE,iBAAMa,UAAWC,EAAjB,eAA8B,kBAAOC,QAAQ,aAAf,0BAC1B,kCAAOC,GAAG,WAAWC,KAAK,YAClBrB,EAAOsB,cAAc,eAD7B,IAEIC,QAASvB,EAAOO,OAAOF,cAE1BL,EAAOQ,OAAOH,YAAa,yBAAML,EAAOQ,OAAOH,aAAoB,SACxE,iBAAMY,UAAWC,EAAjB,UACKlB,EAAOwB,QACR,mBAAQH,KAAK,SAAb,2B,8BCtChB,GAAeI,EAAAA,EAAAA,KANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAIa,CAAC9B,QAAAA,EAAAA,IAAzC,EAlB0C,SAAC,GAAuB,IAAtB8B,EAAqB,EAArBA,OAAQ9B,EAAa,EAAbA,QAChD,OAAG8B,GACQ,SAAC,KAAD,CAAUE,GAAI,cAGrB,4BACG,mCACC,SAACjC,EAAD,CAAWC,QAASA","sources":["webpack://samurai-way/./src/components/Login/LoginForm.module.css?574c","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fields\":\"LoginForm_fields__Ci0OC\"};","\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport css from './LoginForm.module.css'\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\ntype LoginFormType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, setStatus: any, setSubmitting: any) => void\n}\n\nexport const LoginForm: React.FC<LoginFormType> = ({loginTC}) => {\n    console.log(\"RERENDER\")\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'required';\n            } else if (!/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'required'\n            } else if (values.password.trim().length < 5) {\n                errors.password = \"min 5 symbols\"\n            }\n            return errors;\n        },\n        onSubmit: (values,onSubmitProps) => {\n            loginTC(values.email, values.password, values.rememberMe, onSubmitProps.setStatus, onSubmitProps.setSubmitting)\n            onSubmitProps.setSubmitting(true);\n            // alert(JSON.stringify(values));\n        },\n    });\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div className={css.fields}> <label htmlFor=\"email\">Email</label>\n                <input id=\"email\" type=\"email\"\n                    {...formik.getFieldProps(\"email\")}\n                />\n                {formik.errors.email ? <div>{formik.errors.email}</div> : null}</div>\n            <div  className={css.fields}> <label htmlFor=\"password\">Password</label>\n                <input id=\"password\" type=\"password\"\n                    {...formik.getFieldProps(\"password\")}\n                />\n                {formik.errors.password ? <div>{formik.errors.password}</div> : null}</div>\n            <div  className={css.fields}> <label htmlFor=\"RememberMe\">Remember Me</label>\n                <input id=\"checkbox\" type=\"checkbox\"\n                    {...formik.getFieldProps(\"rememberMe\")}\n                    checked={formik.values.rememberMe}\n                />\n                {formik.errors.rememberMe ? <div>{formik.errors.rememberMe}</div> : null}</div>\n            <div  className={css.fields}>\n                {formik.status}\n                <button type=\"submit\">Submit</button>\n            </div>\n        </form>\n    );\n};","import React from 'react';\nimport {LoginForm} from \"./LoginForm\";\nimport {connect} from \"react-redux\";\nimport {loginTC} from \"../../redux/auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\nconst Login: React.FC<ProfilePropsType> = ({isAuth, loginTC}) => {\n    if(isAuth) {\n        return <Navigate to={\"/profile\"}/>\n    }\n    return (\n        <div>\n           <h1>Login</h1>\n            <LoginForm loginTC={loginTC}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect(mapStateToProps, {loginTC})(Login)\n\n\n// types\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    loginTC: (email: string, password: string, rememberMe: boolean, setStatus: any, setSubmitting: any) => void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType"],"names":["LoginForm","loginTC","console","log","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","trim","length","onSubmit","onSubmitProps","setStatus","setSubmitting","handleSubmit","className","css","htmlFor","id","type","getFieldProps","checked","status","connect","state","isAuth","auth","to"],"sourceRoot":""}